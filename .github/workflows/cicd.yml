name: CICD

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t muratali/kitaphub-backend:latest .
          docker push muratali/kitaphub-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Trigger ECS Deployment
        run: |
          aws ecs update-service \
            --cluster kitaphubCluster \
            --service kitaphub-backend-task-service-w4mubxls \
            --force-new-deployment

  dast:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Start Juice Shop
        run: |
          docker run -d -p 8080:3000 --name juiceshop bkimminich/juice-shop
          echo "Waiting for Juice Shop to start..."
          docker run --network container:juiceshop curlimages/curl \
            --retry 15 --retry-delay 5 --retry-all-errors \
            --connect-timeout 10 --max-time 20 \
            http://localhost:3000 || true
          sleep 5

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        id: zap-scan
        with:
          target: 'http://localhost:8080'
          cmd_options: >-
            -J zap_report.json
            -w zap_report.md
            -r zap_report.html
            -z "-config scanner.attackStrength=HIGH"
            --hook=/zap/wrk/.zap/zap-hook.py
          fail_action: false

      - name: Verify and Process Reports
        run: |
          # List all files in working directory
          echo "Current directory contents:"
          ls -la

          # Check specifically for ZAP output files
          echo "ZAP report files:"
          ls -la zap_report.* || echo "No ZAP report files found"

          # Wait and retry if files aren't immediately available
          for i in {1..5}; do
            if [ -f "zap_report.json" ]; then
              break
            fi
            echo "Waiting for report files... (attempt $i/5)"
            sleep 5
          done

          if [ ! -f "zap_report.json" ]; then
            echo "::error::ZAP scan failed to generate report"
            exit 1
          fi

          # Process the report
          echo "Processing scan results..."
          CRITICAL=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' zap_report.json || echo "0")
          MEDIUM=$(jq '[.site[].alerts[] | select(.risk == "Medium")] | length' zap_report.json || echo "0")

          echo "Vulnerabilities found:"
          echo "Critical: $CRITICAL"
          echo "Medium: $MEDIUM"
          echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            zap_report.json
            zap_report.md
            zap_report.html
          retention-days: 7
