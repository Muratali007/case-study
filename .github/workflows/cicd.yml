name: CICD

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t muratali/kitaphub-backend:latest .
          docker push muratali/kitaphub-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Trigger ECS Deployment
        run: |
          aws ecs update-service \
            --cluster kitaphubCluster \
            --service kitaphub-backend-task-service-w4mubxls \
            --force-new-deployment

  dast:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Start OWASP Juice Shop
        run: |
          docker run -d -p 8080:3000 --name juiceshop bkimminich/juice-shop
          echo "Waiting for Juice Shop to initialize..."
          docker run --network container:juiceshop curlimages/curl \
            --retry 15 --retry-delay 5 --retry-all-errors \
            --connect-timeout 10 --max-time 20 \
            http://localhost:3000 || true
          sleep 5
          echo "Juice Shop container status:"
          docker ps -f name=juiceshop --format "{{.Status}}"

      # Run ZAP security scan
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: 'http://localhost:8080'
          cmd_options: >-
            -r report_html.html 
            -w report_md.md 
            -J report_json.json
            --hook=zap-hook.py
            -z "-config scanner.attackStrength=HIGH"
          fail_action: false
          allow_issue_writing: false

      # Process and upload results
      - name: Upload Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            report_html.html
            report_md.md
            report_json.json
          retention-days: 7

      # Optional: Fail workflow if critical issues found
      - name: Check for Critical Vulnerabilities
        if: contains(steps.zap.outputs.summary, 'FAIL-NEW')
        run: |
          echo "Critical vulnerabilities detected!" >&2
          exit 1
