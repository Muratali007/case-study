name: CICD

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t muratali/kitaphub-backend:latest .
          docker push muratali/kitaphub-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Trigger ECS Deployment
        run: |
          aws ecs update-service \
            --cluster kitaphubCluster \
            --service kitaphub-backend-task-service-w4mubxls \
            --force-new-deployment

  dast:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Start OWASP Juice Shop
        run: |
          docker run -d -p 8080:3000 --name juiceshop bkimminich/juice-shop
          echo "Waiting for Juice Shop to initialize..."
          docker run --network container:juiceshop curlimages/curl \
            --retry 15 --retry-delay 5 --retry-all-errors \
            --connect-timeout 10 --max-time 20 \
            http://localhost:3000 || true
          sleep 5

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        id: zap
        with:
          target: 'http://localhost:8080'
          cmd_options: >-
            -r report.html
            -w report.md
            -J report.json
            -z "-config scanner.attackStrength=HIGH"
            -U admin -P password123  # Juice Shop default credentials
          fail_action: false

      - name: Process Scan Results
        run: |
          # Wait briefly to ensure file is written
          sleep 5

          # Verify report exists
          if [ ! -f "report.json" ]; then
            echo "Error: report.json not found!"
            echo "Contents of working directory:"
            ls -la
            exit 1
          fi

          # Filter out false positives
          jq 'del(.site[]?.alerts[]? | select(.risk == "Informational"))' report.json > filtered_report.json

          # Count vulnerabilities
          CRITICAL=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' filtered_report.json || echo "0")
          MEDIUM=$(jq '[.site[].alerts[] | select(.risk == "Medium")] | length' filtered_report.json || echo "0")

          echo "Vulnerabilities found:"
          echo "Critical: $CRITICAL"
          echo "Medium: $MEDIUM"

          # Set output for conditional failure
          echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            report.html
            report.md
            filtered_report.json
          retention-days: 7

      - name: Fail on Critical Vulnerabilities
        if: steps.process-results.outputs.critical_count != '0'
        run: |
          echo "Critical vulnerabilities detected!" >&2
          exit 1
